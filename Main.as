package {	import flash.display.*;	import flash.events.*;	import flash.text.*;	import flash.geom.*;	import flash.system.*;	import flash.utils.Timer;	import flash.external.ExternalInterface;	import caurina.transitions.Tweener;	import caurina.transitions.properties.TextShortcuts;	import com.projectcocoon.webcam.events.SnapshotEvent;	import com.projectcocoon.webcam.utils.*;	import com.projectcocoon.webcam.sounds.*;	public class Main extends Sprite {		private const delay:Number = 1000;		private const loop:int = 4;		private var bg:Background;		private var snapshotButton:SnapshotButton;		private var countdownPanel:CountdownPanel;		private var countdownText:CountdownText;		private var uploadAnimation:UploadAnimation;		private var bitmapCapture:BitmapCapture;		private var cameraSound:CameraSound;		private var isTimerRunning:Boolean = false;		private var countdownTimer:Timer;		private var counter:int = 0;		private var okButton:OKButton;		private var resetButton:ResetButton;		public var uploadURL:String;		public var countdownPanelColor:int;		public var imagePath:String;		public var basePath:String = loaderInfo.parameters.base;		public var tag:String = loaderInfo.parameters.tag;		public var webcamSnapshot:WebcamSnapshot;		public function Main() {			init();		}		private function init():void {			stage.scaleMode = StageScaleMode.NO_SCALE;			stage.align = StageAlign.TOP_LEFT;			flash.system.Security.allowDomain("*");			getFlashVars();			initInterface();			addWebCam();			addButton();			TextShortcuts.init();			stage.addEventListener(Event.RESIZE, resizeHandler);			addEventListener(SnapshotEvent.SNAPSHOT, captureImage, false, 0, true);		}		private function initInterface():void {			bg = new Background();			snapshotButton = new SnapshotButton();			countdownPanel = new CountdownPanel();			countdownText = new CountdownText();			uploadAnimation = new UploadAnimation();			okButton = new OKButton();			cameraSound = new CameraSound();			resetButton = new ResetButton();			webcamSnapshot = new WebcamSnapshot();						addInterface();		}		private function getFlashVars():void {			var flashvars:Object = loaderInfo.parameters;			flashvars.phpUrl ? uploadURL = flashvars.phpUrl:uploadURL = "upload.php";			flashvars.countdownColor ? countdownPanelColor = parseInt(flashvars.countdownColor) :countdownPanelColor = 0x347C03;			flashvars.imagePath ? imagePath = flashvars.imagePath : imagePath = "photos/";			flashvars.base ? basePath = flashvars.base : basePath = "";			flashvars.tag ? tag = flashvars.tag : tag = "";		}		private function resizeHandler(event:Event):void {			resizeApplication();		}		private function resetApplication(evt:Event):void {			countdownPanel.visible = false;			countdownText.visible = false;			countdownText.btError.visible = false;			uploadAnimation.visible = false;			okButton.visible = false;			resetButton.visible = false;			countdownText.hakal.visible = false;			snapshotButton.visible = true;			counter = 0;			resetcountdownText();			changeColor(countdownText.camIcon.bg,0x000000);			webcamSnapshot.resetCam();			if (isTimerRunning) {				countdownTimer.stop();				countdownTimer.removeEventListener(TimerEvent.TIMER, countDown);				isTimerRunning = false;				countdownTimer = new Timer(delay,loop);			} else {				bitmapCapture.removeEventListener("UploadComplete", resetApplication);				bitmapCapture.removeEventListener("Uploading", addUploadAnimation);				bitmapCapture.removeEventListener("UploadError", errorUploadMessage);			}		}		private function addInterface() {			addChild(bg);			addChild(countdownPanel);			addChild(countdownText);			changeColor(countdownPanel, countdownPanelColor);			countdownText.v1.alpha = .8;			countdownText.v2.alpha = .8;			countdownText.v3.alpha = .8;			countdownText.hakal.visible = false;			countdownText.btError.visible = false;			bg.width = countdownPanel.width = stage.stageWidth;			bg.height = stage.stageHeight;			bg.x = bg.y = countdownPanel.x = 0;			countdownPanel.y = stage.stageHeight - countdownPanel.height + 1;			countdownText.y = uploadAnimation.y = countdownPanel.y + (countdownPanel.height/2)-3;			countdownText.x = stage.stageWidth/2 - (countdownText.width/2);			uploadAnimation.x = countdownText.width + countdownText.x - 5;			countdownPanel.visible = countdownText.visible = uploadAnimation.visible = false;			bg.visible = false;		}		private function addWebCam():void {			addChild(webcamSnapshot);			resizeApplication();		}		private function resizeApplication():void {			webcamSnapshot.x = webcamSnapshot.y = 0;			webcamSnapshot.width = webcamSnapshot.vidWidth = stage.stageWidth;			webcamSnapshot.height = webcamSnapshot.vidHeight = stage.stageHeight - 31;			bg.width = countdownPanel.width = stage.stageWidth;			bg.height = stage.stageHeight;			countdownPanel.y = stage.stageHeight - countdownPanel.height + 1;			snapshotButton.y = webcamSnapshot.y + webcamSnapshot.height + 6;			snapshotButton.x = stage.stageWidth/2 - (snapshotButton.width/2);			countdownText.y = countdownPanel.y + (countdownPanel.height/2)-3;			countdownText.x = stage.stageWidth/2 - (countdownText.width/2);		}		private function addButton():void {			addChild(uploadAnimation);			snapshotButton.y = webcamSnapshot.y + webcamSnapshot.height + 6;			snapshotButton.x=stage.stageWidth/2-(snapshotButton.width/2);			snapshotButton.buttonMode = true;			addChild(snapshotButton);			okButton.y = webcamSnapshot.y + webcamSnapshot.height + 9;			okButton.x=stage.stageWidth/2 -(okButton.width/2);			okButton.buttonMode = true;			okButton.visible = false;			addChild(okButton);			resetButton.y = webcamSnapshot.y + webcamSnapshot.height - 4;			resetButton.x = webcamSnapshot.width - resetButton.width - 38;			resetButton.buttonMode = true;			resetButton.visible = false;			addChild(resetButton);			snapshotButton.addEventListener(MouseEvent.CLICK, startTimer);			okButton.addEventListener(MouseEvent.CLICK, takeSnapShot);			resetButton.addEventListener(MouseEvent.CLICK, resetApplication);		}		private function startTimer(evt:MouseEvent):void {			countdownTimer = new Timer(delay,loop);			countdownTimer.start();			isTimerRunning = true;			countdownTimer.addEventListener(TimerEvent.TIMER, countDown);			snapshotButton.visible = false;			countdownPanel.visible = countdownText.visible = true;			resetButton.visible = true;		}		private function countDown(evt:TimerEvent):void {			var tempT:TextField;			counter++;			if (counter < loop) {				var temp:TextField = countdownText.getChildByName("v" + counter) as TextField;				changeTextFormat(temp);				if (counter > 1) {					var j:int = counter - 1;					tempT = countdownText.getChildByName("v" + j) as TextField;					Tweener.addTween(tempT,{_text_color:0x000000,time:.3,transition:"linear"});				}			}			if (counter == loop) {				tempT = countdownText.getChildByName("v" + 3) as TextField;				Tweener.addTween(tempT,{_text_color:0x000000,time:.05,transition:"linear",onComplete:function():void{;				changeColor(countdownText.camIcon.bg,0xffffff); }});				countdownTimer.stop();				countdownTimer.removeEventListener(TimerEvent.TIMER, countDown);				isTimerRunning = false;				takePhoto();			}		}		private function takePhoto():void {			dispatchEvent(new SnapshotEvent(SnapshotEvent.SNAPSHOT,webcamSnapshot.videoShot));			takeSnapShot();		}		private function captureImage(evt:SnapshotEvent):void {			bitmapCapture = new BitmapCapture(evt.video, uploadURL, imagePath, basePath, tag);			bitmapCapture.addEventListener("Uploading", addUploadAnimation);			bitmapCapture.addEventListener("UploadComplete", uploadComplete);			bitmapCapture.addEventListener("UploadError", errorUploadMessage);			countdownText.visible = true;		}		private function takeSnapShot(evt:MouseEvent=null):void {			cameraSound.playShutter();			bitmapCapture.validateChoice();			addUploadAnimation();		}		private function changeTextFormat(t:TextField):void {			var tf:TextFormat=new TextFormat();			tf.color = 0xffffff;			t.setTextFormat(tf);		}		private function changeColor(mc:MovieClip, c:int):void {			var newColorTransform:ColorTransform = mc.transform.colorTransform;			newColorTransform.color = c;			mc.transform.colorTransform = newColorTransform;		}		private function resetcountdownText():void {			var style:TextFormat = new TextFormat();			style.color = 0x000000;			for (var i:int=1; i<4; i++) {				var tmp:TextField = countdownText.getChildByName("v" + i) as TextField;				tmp.setTextFormat(style);			}		}		private function addUploadAnimation(evt:Event=null):void {			okButton.visible = false;			uploadAnimation.visible = true;		}		private function uploadComplete(evt:Event):void {			countdownText.hakal.visible = true;			var namePng:String = bitmapCapture.PNGname;			uploadAnimation.visible = false;			resetButton.visible = true;			try {				ExternalInterface.call("messageUpload",basePath+bitmapCapture.nameImage);				ExternalInterface.call("getTag",tag);			} catch (error:Error) {				if (error.errorID != 1502) {					throw error;				}			}		}		private function errorUploadMessage(evt:Event):void {			try {				ExternalInterface.call("messageUpload","Error: "+bitmapCapture.eventStatus);				//ExternalInterface.call("messageUpload", 0);			} catch (error:Error) {				if (error.errorID != 1502) {					throw error;				}			}			resetButton.visible = countdownText.btError.visible = true;			uploadAnimation.visible = false;		}	}}