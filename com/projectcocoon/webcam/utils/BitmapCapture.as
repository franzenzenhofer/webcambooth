package com.projectcocoon.webcam.utils {	import com.adobe.images.PNGEncoder;	import flash.display.*;	import flash.utils.ByteArray;	import flash.net.*	import flash.events.*;	import flash.media.Video;	import flash.geom.Matrix;	import flash.external.ExternalInterface;	public class BitmapCapture extends Sprite {		private var snapShot:Video;		private var count:int = 0;		private var ratio:Number;		private var pngSource:BitmapData;		private var pngName:String;		private var urlUpload:String;		private var imagePath:String;		private var myloader:URLLoader;		private var base:String;		private var tag:String;				public var eventStatus:String;		public var nameImage:String;		public var encodedPNG:PNGEncoder;		public var bmp:Bitmap;		public function BitmapCapture(v:Video,url:String,path:String,b:String,t:String) {			snapShot = v;			urlUpload = url;			imagePath = path;			base = b;			tag = t;			init();		}				private function init():void {			encodedPNG = new PNGEncoder();			generatePhoto();		}		private function generatePhoto():void {			pngSource = new BitmapData(320,240);			ratio = snapShot.width / 350;			var newWidth:Number = snapShot.width;			var newHeight:Number = snapShot.height;			pngSource.draw(snapShot, WebcamSnapshot.mirrorMatrix);			snapShot.attachCamera(null);		}		public function validateChoice():void {			var jpg_binary:ByteArray = PNGEncoder.encode(pngSource);			var current:Date=new Date();			var randInt:int=Math.round(Math.random()*(100-1))+1;			pngName = "pic_";						var header:URLRequestHeader = new URLRequestHeader("Content-type","application/octet-stream");			var jpgRequest:URLRequest = new URLRequest(urlUpload + "?name=" + imagePath + pngName + "&base="+base+"&tag="+tag);			var loader:URLLoader=new URLLoader();			loader.dataFormat = URLLoaderDataFormat.VARIABLES;			jpgRequest.requestHeaders.push(header);			jpgRequest.method = URLRequestMethod.POST;			jpgRequest.data = jpg_binary;			myloader=new URLLoader();			loader.load(jpgRequest);			loader.addEventListener(IOErrorEvent.IO_ERROR,failUpload);			loader.addEventListener(Event.COMPLETE, phpLoaded);		}		private function phpUploading(evt:ProgressEvent):void {			ExternalInterface.call("messageUpload","uploading");			dispatchEvent(new Event("Uploading"));		}		private function phpLoaded(evt:Event):void {			myloader = URLLoader(evt.target);			myloader.dataFormat = URLLoaderDataFormat.VARIABLES;			eventStatus = myloader.data["msg"];			nameImage = myloader.data["imUrl"];			nameImage = extractImageName();			if (eventStatus == "success") {				dispatchEvent(new Event("UploadComplete"));			} else if (eventStatus == "failed") {				eventStatus = "Upload failed";				dispatchEvent(new Event("UploadError"));			}			evt.target.removeEventListener(Event.COMPLETE, phpLoaded);		}		private function HTTPStatusHandler(evt:HTTPStatusEvent):void {			eventStatus = evt.status.toString();		}		private function failUpload(pEvt:IOErrorEvent):void {			eventStatus = "Sending Data failed";			dispatchEvent(new Event("UploadError"));		}		private function extractImageName():String {			var nameArray:Array = nameImage.split("/");			var n:String = nameArray[nameArray.length - 1];			return n;		}		public function get PNGname():String {			return pngName;		}	}}